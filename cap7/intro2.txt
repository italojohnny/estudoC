USE OS PONTEIROS PARA FUNÇÕES PARA PÔR AS COISAS EM ORDEM
Talvez você já saiba a solução: a Biblioteca Padrão de C tem uma função de
ordenação que aceita um ponteiro para uma função de comparação, que será usada
para decidir se um dado é igual a, menor que ou maior que outro dado.
A função qsort() é assim:

qsort(void *array,// um ponteiro para uma array 
      size_t length,// o tamanho desse array
      size_t item_size,// o tamanho de cada elemento do array
      int (*compar)(const void *, const void *));// isso é u ponteiro para uma
                                                 //função que compara os dois 
                                                 //elementos no array
      //ponteiros void* pode apontar para qualquer coisa

A função qsort() compara pares de valores repetidos e, se estiverem na ordem
errada, o computador inverte as posições delas.
E é para isso que a função de comparação serve: vai dizer à função qsort() em
que ordem um par de elementos deve estar. Ela faz isso retornando três valores
diferentes.

+ve     Se o primeiro valor foi maior que o segundo valor, a função deve
        retornar um número positivo.

-ve     Se o primeiro valor for menor que o segundo valor, a função deve
        retornar um número negativo.

0       Se os dois valores forem iguais, a função deve retornar zero.

Digamos que tenha um array de inteiros e você quer colocá-lo em ordem
crescente. Como fica a função de comparação?

int score[] = {543, 323, 32, 554, 11, 3, 112};

Se olhando a assinatura da função de comparação que qsort() precisa, vai ver
que ela recebe dois ponteiros void indicandos por void*. Lembra de void* quando
usamos malloc()? Um ponteiro void pode armazenar o endereço de qualquer tipo de
dados, mas você sempre precisa usar o cast para convertê-lo em algo mais
específico antes de usá-lo.
A função qsort() funciona comparando pares de elementos no array e, depos,
colocando-os na ordem correta. Ela compara os valores chamando a função de
comparação que recebe como parâmetro.

int compare_score (const void* score_a, const void* score_b)
{...}

Valores sempre são passados para funções como ponteiros; então, a primeiroa
coisa que você precisa fazer é pegar os valores inteiros dos ponteiros:

int a = *(int*)score_a;//você precisa aplicar o cast para converter o ponteiro
                       //void para um ponteiro inteiro.
int b = *(int*)score_b;//esse primeiro * pega o int armazenado no endereço
                       //score_b

Depois, você precisa retornar um valor positivo, negativo ou zero, dependendo
se a é maior que, menor que ou igual a b. Para inteiros, isso é realmente fácil
- você apenas subtrai um número pelo o outro:

    return a-b;//se a > b, é positivo. Se a < b, é negativo. Se a == b, é zero.

E você faz com que qsort() ordene o array assim:

    qsort(scores, 7, sizeof(int), compare_score);


